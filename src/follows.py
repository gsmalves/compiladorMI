class Follows:#ANCHOR conferir se identifier é IDE e String Literal 
    #ANCHOR rever a parte de number
    #ANCHOR verificar se global e local englobam o delimitador
    def __init__(self):
        self.follows = {
            'number': ['$',
                       ')',
                       '}',
                       ',',
                       ';',
                       '&&',
                       '||',
                       '>',
                       '<',
                       '<=',
                       '>=',
                       '==',
                       '!=',
                       '+',
                       '-',
                       '/',
                       '*',
                       '┤'],

                       
            'prefixGlobalLocal':['decLiteral',
                                'octLiteral',
                                'hexLiteral',
                                'floatLiteral',
                                '(',
                                'identifier',
                                'stringLiteral',
                                'true',
                                'false',
                                '-'],    

            'globalDecl': ['identifier',
                        'start'
                        'procedure',
                        'function',
                        'struct',
                        'typedef'],

            'decls': ['start'],

            'decl': ['identifier',
                    'start'
                    'procedure',
                    'function',
                    'struct',
                    'typedef'],

            'formalParameterList' : [')'],

            'formalParameterListRead' : [')'
                                    ','],

            'functionDeclaration' :['identifier',
                                    'start'
                                    'procedure',
                                    'function',
                                    'struct',
                                    'typedef'],

            'procDecl' :['identifier',
                        'start'
                        'procedure',
                        'function',
                        'struct',
                        'typedef'],

            'params' : [')'],

            'param' : [')', 
                      ','],

            'functionCall' : [')',
                            ',',
                            ';',
                            '>',
                            '<',
                            '<=',
                            '>=',
                            '==',
                            '!=',
                            '+',
                            '-',
                            '/',
                            '*'],

            'typedefDecl': ['identifier',
                            'start'
                            'procedure',
                            'function',
                            'struct',
                            'typedef'],

            'base' : ['identifier'],

            'structDecl' : ['identifier',
                            'start'
                            'procedure',
                            'function',
                            'struct',
                            'typedef'],

            'extends' : ['{'],

            'constDecl' :  ['identifier',
                            'start'
                            'procedure',
                            'function',
                            'struct',
                            'typedef',
                            'var'],

            'constList': ['}'],

            'const' : ['}',
                      'identifier',
                      'struct',
                      'int',
                      'real',
                      'boolean',
                      'string'],               

            'delimiterConst' :  ['identifier',
                                'start'
                                'procedure',
                                'function',
                                'struct',
                                'typedef'],

            'type' : ['identifier'],

            'value' : ['}',
                      ',',
                      ';'],

            'varDecl' : ['decLiteral',
                        'octLiteral',
                        'hexLiteral',
                        'floatLiteral',
                        'global.',
                        'local.',
                        'start',
                        '(',
                        '}',
                        'identifier',
                        'function',
                        'procedure',
                        'typedef',
                        'struct',
                        'stringLiteral',
                        'var',
                        'while',
                        'true',
                        'false',
                        'if',
                        'read',
                        'print',
                        'return',
                        '-'],

            'variableList' : ['}'];

            'variable' :['identifier',
                        'start'
                        'procedure',
                        'function',
                        'struct',
                        'typedef'],  

            'aux' : ['identifier',
                    'start'
                    'procedure',
                    'function',
                    'struct',
                    'typedef'],               

            'index' : [']'],

            'vector': [',',
                      ';',
                      '='],

            'matrix' : [',',
                      ';',
                      '='],

            'assignmentVector': [',',
                                ';'],

            'assignmentVectorAux': [',',
                                    ';'],

            'valueAssignedVector': ['}'],

            'assignmentMatrix': [',',
                                ';'],

            'assignmentMatrixAux': [',',
                                   ';'],

            'dimensionMatrix' : [',',
                                 ';'],

            'valueAssignedMatrix': ['}'],
            
            'while': ['decLiteral',
                      'octLiteral',
                      'hexLiteral',
                      'floatLiteral',
                      'global.',
                      'local.',
                      '(',
                      '}',
                      'identifier',
                      'stringLiteral',
                      'var',
                      'while',
                      'true',
                      'false',
                      'if',
                      'read',
                      'print',
                      'return',
                      '-'],

            'whileProcedure' : ['decLiteral',
                                'octLiteral',
                                'hexLiteral',
                                'floatLiteral',
                                'global.',
                                'local.',
                                '(',
                                '}',
                                'identifier',
                                'stringLiteral',
                                'var',
                                'while',
                                'true',
                                'false',
                                'if',
                                'read',
                                'print',
                                '-'],

            'boolenaLiteral': [')',
                             ',',
                             ';',
                             '>',
                             '<',
                             '<=',
                             '>=',
                             '==',
                             '!=',
                             '+',
                             '-',
                             '/',
                             '*',
                             '}',
                             '&&',
                             '||'],


            'conditionalExpression':[')'],

            'if': ['decLiteral',
                    'octLiteral',
                    'hexLiteral',
                    'floatLiteral',
                    'global.',
                    'local.',
                    '(',
                    '}',
                    'identifier',
                    'stringLiteral',
                    'var',
                    'while',
                    'true',
                    'false',
                    'if',
                    'read',
                    'print',
                    'return',
                    '-'],

            'then': ['decLiteral',
                      'octLiteral',
                      'hexLiteral',
                      'floatLiteral',
                      'global.',
                      'local.',
                      '(',
                      '}',
                      'identifier',
                      'stringLiteral',
                      'var',
                      'while',
                      'true',
                      'false',
                      'if',
                      'read',
                      'print',
                      'return',
                      '-'],

            'else': ['decLiteral',
                      'octLiteral',
                      'hexLiteral',
                      'floatLiteral',
                      'global.',
                      'local.',
                      '(',
                      '}',
                      'identifier',
                      'stringLiteral',
                      'var',
                      'while',
                      'true',
                      'false',
                      'if',
                      'read',
                      'print',
                      'return',
                      '-'],

            'ifProcedure': ['decLiteral',
                            'octLiteral',
                            'hexLiteral',
                            'floatLiteral',
                            'global.',
                            'local.',
                            '(',
                            '}',
                            'identifier',
                            'stringLiteral',
                            'var',
                            'while',
                            'true',
                            'false',
                            'if',
                            'read',
                            'print',
                            '-'],

            'thenProcedure': ['decLiteral',
                            'octLiteral',
                            'hexLiteral',
                            'floatLiteral',
                            'global.',
                            'local.',
                            '(',
                            '}',
                            'identifier',
                            'stringLiteral',
                            'var',
                            'while',
                            'true',
                            'false',
                            'if',
                            'read',
                            'print',
                            '-'],

            'elseProcedure': ['decLiteral',
                            'octLiteral',
                            'hexLiteral',
                            'floatLiteral',
                            'global.',
                            'local.',
                            '(',
                            '}',
                            'identifier',
                            'stringLiteral',
                            'var',
                            'while',
                            'true',
                            'false',
                            'if',
                            'read',
                            'print',
                            '-'],

            'read': ['decLiteral',
                      'octLiteral',
                      'hexLiteral',
                      'floatLiteral',
                      'global.',
                      'local.',
                      '(',
                      '}',
                      'identifier',
                      'stringLiteral',
                      'var',
                      'while',
                      'true',
                      'false',
                      'if',
                      'read',
                      'print',
                      'return',
                      '-'],

            'print': ['decLiteral',
                      'octLiteral',
                      'hexLiteral',
                      'floatLiteral',
                      'global.',
                      'local.',
                      '(',
                      '}',
                      'identifier',
                      'stringLiteral',
                      'var',
                      'while',
                      'true',
                      'false',
                      'if',
                      'read',
                      'print',
                      'return',
                      '-'],

            'body': ['}'],

            'bodyItem': ['decLiteral',
                        'octLiteral',
                        'hexLiteral',
                        'floatLiteral',
                        'global.',
                        'local.',
                        '(',
                        '}',
                        'identifier',
                        'stringLiteral',
                        'var',
                        'while',
                        'true',
                        'false',
                        'if',
                        'read',
                        'print',
                        'return',
                        '-'],

            'returnStetement':['decLiteral',
                                'octLiteral',
                                'hexLiteral',
                                'floatLiteral',
                                'global.',
                                'local.',
                                '(',
                                '}',
                                'identifier',
                                'stringLiteral',
                                'var',
                                'while',
                                'true',
                                'false',
                                'if',
                                'read',
                                'print',
                                'return',
                                '-'],

            'bodyProcedure':['}'], 

            'bodyItemProcedure':['decLiteral',
                                'octLiteral',
                                'hexLiteral',
                                'floatLiteral',
                                'global.',
                                'local.',
                                '(',
                                '}',
                                'identifier',
                                'stringLiteral',
                                'var',
                                'while',
                                'true',
                                'false',
                                'if',
                                'read',
                                'print',
                                '-'], 

            'conditionalOperator': 'decLiteral',
                                    'octLiteral',
                                    'hexLiteral',
                                    'floatLiteral',
                                    'global.',
                                    'local.',
                                    '(',
                                    'identifier',
                                    'stringLiteral',
                                    'true',
                                    'false',
                                    '!',
                                    '-'],

        
            'logicalDenied': [')'],

            'logical': [')'],

            'expressionValueLogical':[')',
                                      '&&',
                                      '||'],     

            'logicalExpression':    [')'],  

            'relacionalExpression': [')',
                                    '&&',
                                    '||'],     
 
            'relational': [')',
                           '&&',
                           '||'],     


            'assign':['decLiteral',
                    'octLiteral',
                    'hexLiteral',
                    'floatLiteral',
                    'global.',
                    'local.',
                    '(',
                    '}',
                    'identifier',
                    'stringLiteral',
                    'var',
                    'while',
                    'true',
                    'false',
                    'if',
                    'read',
                    'print',
                    'return',
                    '-'],                                               

            'exp': [')',
                    ',',
                    ';',
                    '&&',
                    '||',
                    '>',
                    '<',
                    '<=',
                    '>=',
                    '==',
                    '!='], 

            'addExp' : [')',
                        ',',
                        ';',
                        '&&',
                        '||',
                        '>',
                        '<',
                        '<=',
                        '>=',
                        '==',
                        '!='], 
        
            
            'term':[')',
                    ',',
                    ';',
                    '&&',
                    '||',
                    '>',
                    '<',
                    '<=',
                    '>=',
                    '==',
                    '!=',
                    '+',
                    '-'], 

            'expressionValue' : [')',
                                ',',
                                ';',
                                '&&',
                                '||',
                                '>',
                                '<',
                                '<=',
                                '>=',
                                '==',
                                '!=',
                                '+',
                                '-',
                                '*',
                                '/'],    

            'multExp': [')',
                    ',',
                    ';',
                    '&&',
                    '||',
                    '>',
                    '<',
                    '<=',
                    '>=',
                    '==',
                    '!=',
                    '+',
                    '-'], 
                         



           
        }

    def get_follows(self, production: str, lexema):
        production_follows = self.follows.get(production)

        if production_follows:
            "print(production_follows)"

            return production_follows.__contains__(lexema)
